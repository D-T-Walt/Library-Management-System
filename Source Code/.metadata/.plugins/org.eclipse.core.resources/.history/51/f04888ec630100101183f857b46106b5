package lms;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.io.FileNotFoundException;
import java.util.InputMismatchException;
import java.awt.Toolkit;
import javax.swing.JOptionPane;

public class BookBinarySearchTree 
{
	private BookBSTNode root;
	
	public BookBinarySearchTree(){
		root = null;
	}
	
	public BookBSTNode getRoot() {
		return root;
	}

	public void setRoot(BookBSTNode root) {
		this.root = root;
	}
	
	public void insertBookBSTNode(Book book){
		BookBSTNode temp = new BookBSTNode(book);
		
		if(temp != null){
			if(this.root == null){
				this.root = temp;
			}
			else
			{
				BookBSTNode tempRoot = this.root;
				while(true){
					if(temp.getData().getISBN().compareTo(temp.getData().getISBN()) < 0){
						if(tempRoot.getLeftSubTree() == null){
							tempRoot.setLeftSubTree(temp);
							break;
						}
						else{
							tempRoot = tempRoot.getLeftSubTree();
						}
					}
					else{
						if(tempRoot.getRightSubTree() == null){
							tempRoot.setRightSubTree(temp);
							break;
						}
						else{
							tempRoot = tempRoot.getRightSubTree();
						}
					}
				}
			}
		}
		else{
			System.err.println("Tree is full. Cannot add another node!");
		}
	}
	
	public void seachByTitle(Scanner input)
	{
		System.out.print("Enter the title or the part of the title you remember of the book that you'd like to find: ");
		String keyword = input.nextLine();
		
		List<Book> results = new ArrayList<>();
		
		//Recursive helper function
		searchByTitleRecursive(root, keyword, results);
	
		if(isEmpty(results))
		{
			System.err.println("Sorry, but we couldnt find the title you searched for in our system.");
			System.out.print("Press ENTER to continue");
	        input.nextLine(); // Wait for user input before returning
			return;
		}
		
		// If only one book is found, print its details immediately
	    if (results.size() == 1) 
	    {
	        System.out.println("\nBook Details:\n" + "Book Title: " + results.get(0).getTitle() + " | Author's Name: " + results.get(0).getAuthorFName() + " " + results.get(0).getAuthorLName() +  " | Book ISBN: " + results.get(0).getISBN() + " | Available?: " + results.get(0).getAvailable());
	    	System.out.print("Press ENTER to continue");
	        input.nextLine(); // Wait for user input before returning

	        return;
	    }
		
		//Display books found
		System.out.println("\nThe books found based on your search are: ");
		for (int i = 0; i < results.size(); i++) 
		{
            System.out.println((i + 1) + ". " + results.get(i).getTitle() + " by " + results.get(i).getAuthorFName() + " " + results.get(i).getAuthorLName());
        }
        
        // Ask user to confirm book selection
        System.out.print("\nEnter the number corresponding to the book you're looking for (or 0 to cancel): ");
        int choice = input.nextInt();
        input.nextLine(); // Consume newline
        
        if (choice > 0 && choice <= results.size()) 
        {
            Book selectedBook = results.get(choice - 1);
            System.out.println("\nBook Details:\n" + "Book Title: " + selectedBook.getTitle() + " | Author's Name: " + selectedBook.getAuthorFName() + " " + selectedBook.getAuthorLName() +  " | Book ISBN: " + selectedBook.getISBN() + " | Available?: " + selectedBook.getAvailable());
        	System.out.print("Press ENTER to continue");
	        input.nextLine(); // Wait for user input before returning
        } 
        else 
        {
            System.err.println("Invalid selection or cancelled.");
        	System.out.print("Press ENTER to continue");
	        input.nextLine(); // Wait for user input before returning
        }
	}
	
	//Recursive Search Helper Method
	public void searchByTitleRecursive(BookBSTNode node, String keyword, List<Book> results)
	{
		if(node == null) return;
		
		//If the book title contains the keyword, add it to the results
		if (node.getData().getTitle().toLowerCase().contains(keyword.toLowerCase()))
		{
			results.add(node.getData());
		}
		
		//Recursively search in the left subtree
        searchByTitleRecursive(node.getLeftSubTree(), keyword, results);
	
		//Recursively search in the right subtree
        searchByTitleRecursive(node.getRightSubTree(), keyword, results);
	}
	
	private boolean isEmpty(List<Book> list) 
	{
	    for (Book book : list) 
	    {
	        return false; //If at least one book exists, it's not empty
	    }
    	return true;      //If no books found, it's empty
	}
	
	public void searchByISBN(Scanner input) 
	{
	    String isbn = "";
	    boolean validInput = false;

	    while (!validInput) {
	        try {
	        	input.nextLine();
	            System.out.print("Enter the ISBN of the book that you'd like to find: ");
	            isbn = input.nextLine().trim(); //Trim to remove accidental spaces

	            if (isbn.isEmpty()) { //Check for empty input
	                Toolkit.getDefaultToolkit().beep();
	                JOptionPane.showMessageDialog(null, "ISBN cannot be empty. Please enter a valid ISBN.", "Input Error", JOptionPane.ERROR_MESSAGE);
	                continue;
	            }

	            String errorMessage = "";

	            if (isbn.length() != 17) {
	                errorMessage += "ISBN must be exactly 17 characters long.\n";
	            }

	            if (isbn.charAt(0) == '-') { 
	                errorMessage += "ISBN must not start with a dash (-).\n";
	            }

	            if (isbn.charAt(isbn.length() - 1) == '-') {
	                errorMessage += "ISBN must not end with a dash (-). \n";
	            }

	            if (LibraryManagementSystem.countDigits(isbn) != 13) {
	                errorMessage += "ISBN must contain exactly 13 digits.\n";
	            }

	            if (LibraryManagementSystem.countDashes(isbn) != 4) {
	                errorMessage += "ISBN must contain exactly 4 dashes.\n";
	            }

	            if (!errorMessage.isEmpty()) {
	                throw new InputMismatchException(errorMessage.trim());
	            }

	            validInput = true; //If no errors, input is valid

	        } catch (InputMismatchException e) {
	            Toolkit.getDefaultToolkit().beep();
	            JOptionPane.showMessageDialog(null, "Invalid ISBN:\n" + e.getMessage(), "Input Error", JOptionPane.ERROR_MESSAGE);
	        }
	    }

	    // Proceed with book search
	    List<Book> results = new ArrayList<>();
	    searchByISBNRecursive(root, isbn, results);

	    if (results.isEmpty()) {
	        System.err.println("Sorry, but we couldn't find the ISBN you searched for in our system.");
	        System.out.print("Press ENTER to continue");
	        input.nextLine(); // Wait for user input before returning
	        return;
	    }

	    if (results.size() == 1) 
	    {
	        System.out.println("\nBook Details:\n" +
	                "Book Title: " + results.get(0).getTitle() +
	                " | Author's Name: " + results.get(0).getAuthorFName() + " " + results.get(0).getAuthorLName() +
	                " | Book ISBN: " + results.get(0).getISBN() +
	                " | Available?: " + results.get(0).getAvailable());
	        System.out.print("Press ENTER to continue");
	    }
	}
	
	//For Checkout
	public Book searchISBN(Scanner input) 
	{
	    String isbn = "";
	    boolean validInput = false;

	    while (!validInput) {
	        try {
	            input.nextLine(); //Consume leftover newline
	            System.out.print("Enter the ISBN of the book that you'd like to find: ");
	            isbn = input.nextLine().trim(); // Trim to remove accidental spaces

	            if (isbn.isEmpty()) { //Check for empty input
	                Toolkit.getDefaultToolkit().beep();
	                JOptionPane.showMessageDialog(null, "ISBN cannot be empty. Please enter a valid ISBN.", "Input Error", JOptionPane.ERROR_MESSAGE);
	                continue;
	            }

	            String errorMessage = "";

	            if (isbn.length() != 17) {
	                errorMessage += "ISBN must be exactly 17 characters long.\n";
	            }

	            if (isbn.charAt(0) == '-') {
	                errorMessage += "ISBN must not start with a dash (-).\n";
	            }

	            if (isbn.charAt(isbn.length() - 1) == '-') {
	                errorMessage += "ISBN must not end with a dash (-).\n";
	            }

	            if (LibraryManagementSystem.countDigits(isbn) != 13) {
	                errorMessage += "ISBN must contain exactly 13 digits.\n";
	            }

	            if (LibraryManagementSystem.countDashes(isbn) != 4) {
	                errorMessage += "ISBN must contain exactly 4 dashes.\n";
	            }

	            if (!errorMessage.isEmpty()) {
	                throw new InputMismatchException(errorMessage.trim());
	            }

	            validInput = true; //If no errors, input is valid

	        } catch (InputMismatchException e) {
	            Toolkit.getDefaultToolkit().beep();
	            JOptionPane.showMessageDialog(null, "Invalid ISBN:\n" + e.getMessage(), "Input Error", JOptionPane.ERROR_MESSAGE);
	        }
	    }

	    // Proceed with book search
	    List<Book> results = new ArrayList<>();
	    searchByISBNRecursive(root, isbn, results);

	    if (results.isEmpty()) {
	        System.err.println("Sorry, but we couldn't find the ISBN you searched for in our system.");
	        System.out.print("Press ENTER to continue");
	        input.nextLine(); // Wait for user input before returning
	        return null; // Return null if no book is found
	    } 
	    else {
	    	return results.get(0);
	    }	    
	}
	
	//Recursive Search Helper Method
	public void searchByISBNRecursive(BookBSTNode node, String isbn, List<Book> results) 
	{
	    if (node == null) return;
	
	    // If the book ISBN matches, add it to the results
	    if (node.getData().getISBN().equals(isbn)) {
	        results.add(node.getData());
	    }
	
	    // Recursively search in the left subtree
	    searchByISBNRecursive(node.getLeftSubTree(), isbn, results);
	
	    // Recursively search in the right subtree
	    searchByISBNRecursive(node.getRightSubTree(), isbn, results);
	}
	
	//For Checkout
	public void ISBNRecursiveEnqueue(BookBSTNode node, String isbn, int card) 
	{
	    if (node == null) return; // Base case: If node is null, return
	   
	    
	    if (node.getData().getISBN().equals(isbn)) 
	    {
	        node.getData().getcheckedOutPatrons().enqueue(card);
	        node.getData().setQuantity(node.getData().getQuantity()-1);
	        return;
	    }
	    
	    // If ISBN is smaller, search the left subtree
	    if (isbn.compareTo(node.getData().getISBN()) < 0) 
	    {
	    	ISBNRecursiveEnqueue(node.getLeftSubTree(), isbn, card);
	    } 
	    else 
	    {
	    	ISBNRecursiveEnqueue(node.getRightSubTree(), isbn, card); // Search right subtree
	    }
	}
	
	//For Checkout
	public Book searchPassedISBN(String isbn, Scanner input){
	    List<Book> results = new ArrayList<>();
	    searchByISBNRecursive(root, isbn, results);

	    if (results.isEmpty()) {
	        System.err.println("Sorry, but we couldn't find the ISBN you searched for in our system.");
	        System.out.print("Press ENTER to continue");
	        input.nextLine(); // Wait for user input before returning
	        return null; // Return null if no book is found
	    } 
	    else {
	    	return results.get(0);
	    }	    
	}
    
    public void searchByAuthor(Scanner input)
	{
	    System.out.print("Enter the author's first name, last name, or part of their name that you'd like to find: ");
	    String keyword = input.nextLine();
	    
	    List<Book> results = new ArrayList<>();
	    
	    //Recursive helper function
	    searchByAuthorRecursive(root, keyword, results);
	
	    if(isEmpty(results))
	    {
	        System.err.println("Sorry, but we couldn't find any books by the author you searched for.");
	        System.out.print("Press ENTER to continue");
	        return;
	    }
	    
	    // If only one book is found, print its details immediately
	    if (results.size() == 1) 
	    {
	        System.out.println("\nBook Details:\n" + "Book Title: " + results.get(0).getTitle() + " | Author's Name: " + results.get(0).getAuthorFName() + " " + results.get(0).getAuthorLName() +  " | Book ISBN: " + results.get(0).getISBN() + " | Available?: " + results.get(0).getAvailable());
	        System.out.print("Press ENTER to continue");
	        return;
	    }
	    
	    // Display books found
	    System.out.println("\nThe books found based on your search are: ");
	    for (int i = 0; i < results.size(); i++) 
	    {
	        System.out.println((i + 1) + ". " + results.get(i).getTitle() + " by " + results.get(i).getAuthorFName() + " " + results.get(i).getAuthorLName());
	    }
	    
	    // Ask user to confirm book selection
	    System.out.print("\nEnter the number of the book you're looking for (or 0 to cancel): ");
	    int choice = input.nextInt();
	    input.nextLine(); // Consume newline
	    
	    if (choice > 0 && choice <= results.size()) 
	    {
	        Book selectedBook = results.get(choice - 1);
	        System.out.println("\nBook Details:\n" + "Book Title: " + selectedBook.getTitle() + " | Author's Name: " + selectedBook.getAuthorFName() + " " + selectedBook.getAuthorLName() +  " | Book ISBN: " + selectedBook.getISBN() + " | Available?: " + selectedBook.getAvailable());
	        System.out.print("Press ENTER to continue");
	    } 
	    else 
	    {
	        System.err.println("Invalid selection or cancelled.");
	        System.out.print("Press ENTER to continue");
	    }
	}

	// Recursive Search Helper Method
	public void searchByAuthorRecursive(BookBSTNode node, String keyword, List<Book> results)
	{
	    if(node == null) return;
	
	    // Check if either the first or last name of the author contains the keyword
	    if (node.getData().getAuthorFName().toLowerCase().contains(keyword.toLowerCase()) || 
	        node.getData().getAuthorLName().toLowerCase().contains(keyword.toLowerCase()))
	    {
	        results.add(node.getData());
	    }
	    
	    // Recursively search in the left subtree
	    searchByAuthorRecursive(node.getLeftSubTree(), keyword, results);
	
	    // Recursively search in the right subtree
	    searchByAuthorRecursive(node.getRightSubTree(), keyword, results);
	}
	
	/*
	public void AdminSearchByAuthor()
	{
		
	}
	
	// Recursive Search Helper Method
	public void AdminSearchByAuthorRecursive(BookBSTNode node, String keyword, List<Book> results, PatronLinkedList patron)
	{
	    if(node == null) return;
	    
	    //QUEUE
	    //copy over the information from original instance 'node.getData().getcheckedOutPatrons()' into 'temp' 
	    PatronQueue temp = new PatronQueue();
		PatronQueueNode current = node.getData().getcheckedOutPatrons().getFront(); // Saving the original queue in current
		
		// Copy each element from the queue to the temporary queue
		while (current != null) {
		    temp.enqueue(current.getcardNum()); // Copy each element
		    current = current.getNextNode();
		}
	    
	    // Dequeue the temporary queue to process each patron
		while (temp.getFront() != null) { 
		    int cardNumber = temp.dequeue();
		}
	    
	    //PATRONLINKEDLIST
	    PatronNode curr = patron.getHead(); //saving the original linked list in curr

		while (curr != null) {
		    curr = curr.getNextNode();
		}
	    
	    //if (cardNumber==(patron.getHead().getPatronData().getCardNum()))
	    {
	        results.add(node.getData());
	    }
	    
	    // Recursively search in the left subtree
	    searchByAuthorRecursive(node.getLeftSubTree(), keyword, results);
	
	    // Recursively search in the right subtree
	    searchByAuthorRecursive(node.getRightSubTree(), keyword, results);
	}
	*/
	
	/*
	// Method that compares Patrons in Queue and Linked List
	public void comparePatrons(BookBSTNode node, PatronLinkedList patron)
	{
	    PatronQueue temp = new PatronQueue();
	    PatronQueueNode current = node.getData().getcheckedOutPatrons().getFront(); // Saving the original queue in current
	    
	    // Copy each element from the queue to the temporary queue
	    while (current != null) 
	    {
	        temp.enqueue(current.getcardNum()); // Copy each card number
	        current = current.getNextNode();
	    }
	    
	    // Now process the queue and compare with patrons in the linked list
	    PatronNode curr = patron.getHead(); // Saving the original linked list in curr
	    
	    // Traverse the linked list and compare each patron
	    while (curr != null) 
	    {
	        // Check if the patron's card number matches the one in the queue
	        if (temp.getFront() != null && curr.getPatronData().getCardNum() == temp.dequeue()) {
	            System.out.println("Patron: " + curr.getPatronData().getFname() + " " + curr.getPatronData().getLname() +
	                               " | Card Number: " + curr.getPatronData().getCardNum());
	        }
	        curr = curr.getNextNode();
	    }
	}
	*/
	
	public void adminSearchByAuthor(Scanner input, PatronLinkedList ptrn)
	{
	    System.out.print("Enter the author's first name, last name, or part of their name that you'd like to find: ");
	    String keyword = input.nextLine();
	    
	    List<Book> results = new ArrayList<>();
	    
	    // Recursive helper function to search books by author
	    searchByAuthorRecursive(root, keyword, results);
	
	    if (isEmpty(results))
	    {
	        System.err.println("Sorry, but we couldn't find any books by the author you searched for.");
	        System.out.print("Press ENTER to continue");
	        return;
	    }
	    
	    // If only one book is found, print its details immediately
	    if (results.size() == 1) 
	    {
	        System.out.println("\nBook Details:\n" + "Book Title: " + results.get(0).getTitle() + " | Author's Name: " + results.get(0).getAuthorFName() + " " + results.get(0).getAuthorLName() +  " | Book ISBN: " + results.get(0).getISBN() + " | Available?: " + results.get(0).getAvailable());
	        System.out.print("Press ENTER to continue");
	        return;
	    
	        
	        // Now display patron details for each patron in the queue (compared to linked list)
	        comparePatrons(root, ptrn);
	
	        System.out.print("Press ENTER to continue");
	        return;
	    }
	    
	    // Display books found
	    System.out.println("\nThe books found based on your search are: ");
	    for (int i = 0; i < results.size(); i++) 
	    {
	        System.out.println((i + 1) + ". " + results.get(i).getTitle() + " by " + results.get(i).getAuthorFName() + " " + results.get(i).getAuthorLName());
	    }
	    
	    // Ask user to confirm book selection
	    System.out.print("\nEnter the number of the book you're looking for (or 0 to cancel): ");
	    int choice = input.nextInt();
	    input.nextLine(); // Consume newline
	    
	    if (choice > 0 && choice <= results.size()) 
	    {
	        Book selectedBook = results.get(choice - 1);
	        System.out.println("\nBook Details:\n" + "Book Title: " + selectedBook.getTitle() + " | Author's Name: " + selectedBook.getAuthorFName() + " " + selectedBook.getAuthorLName() +  " | Book ISBN: " + selectedBook.getISBN() + " | Available?: " + selectedBook.getAvailable());
	        System.out.print("Press ENTER to continue");
	    
	        // Now display patron details for each patron in the queue (compared to linked list)
	        comparePatrons(root, ptrn);
	
	        System.out.print("Press ENTER to continue");
	    } 
	    else 
	    {
	        System.err.println("Invalid selection or cancelled.");
	        System.out.print("Press ENTER to continue");
	    }
	}
	
	// Method that compares Patrons in Queue and Linked List
	public void comparePatrons(BookBSTNode node, PatronLinkedList patron) 
	{
	    PatronQueue temp = new PatronQueue();
	    PatronQueueNode current = node.getData().getcheckedOutPatrons().getFront(); // Get the front of the queue
	    
	    // Copy elements from the queue into temp (to preserve the original queue)
	    while (current != null) 
	    {
	        temp.enqueue(current.getcardNum()); // Copy each patron's card number
	        current = current.getNextNode();
	    }
	    
	    // Now process the linked list and compare with the copied queue
	    PatronNode curr = patron.getHead(); // Start from the head of the linked list
	    
	    while (curr != null) 
	    {
	        // Reset 'current' to the front of 'temp' for each patron in linked list
	        current = temp.getFront();  
	
	        while (current != null)  // Loop through the copied queue
	        {
	            if (curr.getPatronData().getCardNum() == current.getcardNum()) 
	            {
	                System.out.println("Patron: " + curr.getPatronData().getFname() + " " + curr.getPatronData().getLname() +
	                                   " | Card Number: " + curr.getPatronData().getCardNum());
	                break; // Exit inner loop after finding a match
	            }
	            current = current.getNextNode(); // Move to the next patron in the queue
	        }
	
	        curr = curr.getNextNode(); // Move to the next patron in the linked list
	    }
	}
	
	
}
