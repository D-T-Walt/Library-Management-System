package lms;

import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

import javax.swing.JOptionPane;

public class Patron {
private String fname;
    private String lname;
    private int cardNum;
    private StackLinkedList checkedOutBooks; //list of books from part 1
    
    public Patron() //default constructor
    {
        this.fname = " ";
        this.lname = " ";
        this.cardNum = 0;
        this.checkedOutBooks = new StackLinkedList();
    }
    
	/*
    //primary constructor
    public Patron(String fname, String lname, int cardNum)
    {
        this.fname = fname;
        this.lname = lname;
        this.cardNum = cardNum;
        this.checkedOutBooks = new StackLinkedList();
    }
	*/
	
	    //primary constructor
    public Patron(String fname, String lname, int cardNum, StackLinkedList books) {
        this.fname = fname;
        this.lname = lname;
        this.cardNum = cardNum;
        
        // ✅ If a book list exists, use it. Otherwise, create an empty one.
        this.checkedOutBooks = (books != null) ? books : new StackLinkedList();
    }
	
    /*
    public Patron(Patron p) //copy constructor
    {
        this.fname = p.fname;
        this.lname = p.lname;
        this.cardNum = p.cardNum;
        this.checkedOutBooks = new StackLinkedList();
    }
	*/

	 // ✅ Updated Copy Constructor
    public Patron(Patron p) {
        this.fname = p.fname;
        this.lname = p.lname;
        this.cardNum = p.cardNum;
        
        // ✅ Ensure we copy the book stack properly
        this.checkedOutBooks = new StackLinkedList(p.checkedOutBooks);
    }
    //geters and setters
    public String getFname() {
            return fname;
        }

    public void setFname(String fname) {
        this.fname = fname;
    }

    public String getLname() {
        return lname;
    }

    public void setLname(String lname) {
        this.lname = lname;
    }

    public int getCardNum() {
        return cardNum;
    }

    public void setCardNum(int cardNum) {
        this.cardNum = cardNum;
    }		
    
    public StackLinkedList getCheckedOutBooks() {
        return checkedOutBooks;
    }

    public void setCheckedOutBooks(StackLinkedList checkedOutBooks) {
        this.checkedOutBooks = checkedOutBooks;
    }

	
	public boolean patronLog(ArrayList<Password> pass, Scanner in, PatronLinkedList list) {
        int chance = 0;
        int searchNum = 0;
        String searchP;
        boolean found = false;
        
        //Validate Library Card Number
        do {
            try {
                System.out.printf("\n\nEnter your Library Card Number-> ");
                searchNum = in.nextInt();
                in.nextLine(); // Consume the newline character

                // Search linked list for the patron by card number
                PatronNode curr = list.getHead();
                while (curr != null) {
                    if (curr.getPatronData().getCardNum() == searchNum) {
                        // Match found
                        this.cardNum = curr.getPatronData().getCardNum();
                        this.fname = curr.getPatronData().getFname();
                        this.lname = curr.getPatronData().getLname();
                        found = true;
                        break;
                    }
                    curr = curr.getNextNode();
                }

                if (!found) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,
                        "The Entered Library Card Number doesn't exist!\nYou have " + (4 - chance) + " more tries.",
                        "Login Error",
                        JOptionPane.ERROR_MESSAGE);
                    chance++;
                }
            } catch (InputMismatchException e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,
                    "Invalid input. Please enter a valid Library Card Number.",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
                in.nextLine(); // Clear the invalid input
                chance++;
            }
        } while (chance < 5 && !found);

        if (!found) {
            System.err.println("\nReturning to the previous menu");
            System.out.print("Press ENTER to continue");
            return false;
        }

        // Password verification
        chance = 0;
        do {
            System.out.printf("\nWelcome %s!!!\nEnter your Password-> ", this.fname);
            searchP = in.next();

            String hashedSearchP = Password.hashPassword(searchP);

            if (hashedSearchP.equals(pass.get(searchNum - 1001).getHashPassword())) {
                System.out.printf("Correct Password %s!!", this.fname);

                //Check if the password is the default password and prompt a change
                if (pass.get(searchNum - 1001).getDefaultP().equals(pass.get(searchNum - 1001).getHashPassword())) {
                    Toolkit.getDefaultToolkit().beep();

                    System.err.printf("\n\nYou still have your Default Password it needs to be changed\nEnter what you would like it to be changed to-> ");

                    String newPassword;
                    while (true) {
                        newPassword = in.next();
                        if (newPassword.length()< 8) {
        	                Toolkit.getDefaultToolkit().beep();
                            System.err.printf("\nYour new password must be at least 8 characters long.\nPlease enter a valid password-> ");
                        }
        	            //If old password did not have "admin" (which it shouldn't), new one cannot
                        else if (newPassword.contains("admin")) {
            	                Toolkit.getDefaultToolkit().beep();
            	                System.err.print("\nYour password cannot include 'admin'.\nPlease enter a valid password-> ");
                        }
                        // Validate against reusing the same password
        	            else if (Password.hashPassword(newPassword).equals(pass.get(this.cardNum - 1001).getHashPassword())) {
        	                Toolkit.getDefaultToolkit().beep();
        	                System.err.print("\nYour New Password cannot be the same as the previous one.\nPlease enter a valid password: ");
        	            } 
                        else {
                        	break; //Exit the loop because the password meets requirements
                        }
                    }

                    // The new password entered is hashed, and set as the hashed password in the specific patron's password index
                    pass.get(searchNum - 1001).setHashPassword(Password.hashPassword(newPassword));
                    System.out.printf("\nYour New Password has been set %s!!", this.fname);
                    System.out.print("Press ENTER to continue");
                }

                return true;
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,
                    "The Entered Password is WRONG!\nYou have " + (4 - chance) + " more tries.",
                    "Login Error",
                    JOptionPane.ERROR_MESSAGE);
                chance++;
            }
        } while (chance < 5);

        return false;
    }	
	
	// Allows patron to change password
	public void changePassword(ArrayList<Password> pass, Scanner in) {
	    String oldPassword = null;

	    // Validate card number bounds
	    if ((this.cardNum - 1001) < 0 || (this.cardNum - 1001) >= pass.size()) {
	        System.err.println("Invalid card number. Password change failed.");
	        return;
	    }

	    System.out.printf("\n\nEnter your Current Password: ");
	    oldPassword = in.next();

	    // Verify old password before allowing change
	    if (!Password.hashPassword(oldPassword).equals(pass.get(this.cardNum - 1001).getHashPassword())) {
	        System.err.println("Incorrect current password. Password change failed.");
	        return;
	    }
	    
	    System.out.printf("\n\nEnter your New Password (at least 8 characters): ");

	    while (true) {
	        try {
	            String newPassword = in.next();

	            // Validate password length
	            if (newPassword.length() < 8) {
	                Toolkit.getDefaultToolkit().beep();
	                System.err.print("Your New Password must be at least 8 characters long.\nPlease enter a valid password: ");
	            } 
	            //If old password had "admin", new one must too
	            else if (oldPassword.contains("admin") && !newPassword.contains("admin")) {
	                Toolkit.getDefaultToolkit().beep();
	                System.err.print("Your previous password contained 'admin'. Your new password must also include 'admin'.\nPlease enter a valid password: ");
	            }
	            //If old password did not have "admin", new one cannot
	            else if (!oldPassword.contains("admin") && newPassword.contains("admin")) {
	                Toolkit.getDefaultToolkit().beep();
	                System.err.print("Your previous password did not contain 'admin'. Your new password cannot include 'admin'.\nPlease enter a valid password: ");
	            }
	            // Validate against reusing the same password
	            else if (Password.hashPassword(newPassword).equals(pass.get(this.cardNum - 1001).getHashPassword())) {
	                Toolkit.getDefaultToolkit().beep();
	                System.err.print("Your New Password cannot be the same as the previous one.\nPlease enter a valid password: ");
	            } 
	            // If all checks pass, update the password in the ArrayList
	            else {
	                pass.get(this.cardNum - 1001).setHashPassword(Password.hashPassword(newPassword));
	                System.out.printf("\nYour New Password has been set, %s!!\n", this.fname);
	                System.out.print("Press ENTER to continue");
	                break; // Exit loop after successful password change
	            }
	        } catch (InputMismatchException e) {
	            Toolkit.getDefaultToolkit().beep();
	            System.err.print("Invalid input. Please enter a valid password: ");
	            in.next(); // Clear the invalid input
	        }
	    }
	}
	
	public void checkout(Scanner in, PatronLinkedList list, BookBinarySearchTree bst, BookLinkedList books){
		
		int opt;
		Book temp= null;
		StackLinkedList tempStack= new StackLinkedList();
		PatronNode curr = list.getHead();
		BookNode bookCurr= books.getHead();
		
		while (curr != null) {
	        if (curr.getPatronData().getCardNum() == this.cardNum) {
	            tempStack= new StackLinkedList(curr.getPatronData().checkedOutBooks);
	        	break;
	        }
	        curr = curr.getNextNode();
	    }
		
		do {
	        System.out.println("\nCheckout Menu:");
	        System.out.println("1. Add a book to your checkout list");
	        System.out.println("2. Remove a book from your checkout list");
	        System.out.println("3. View the last book added to your checkout list and the amount of books in your checkout list");
	        System.out.println("4. Clear checkout list");
	        System.out.println("5. Exit checkout system");
	        System.out.print("Enter your option: ");

	        while (!in.hasNextInt()) { // Prevent invalid input
	            System.err.print("Invalid input! Please enter a number: ");
	            in.next();
	        }
	        opt = in.nextInt();
	        in.nextLine(); // Consume newline

	        switch (opt) {
	        case 1:
	            // Reset to the start of the patron list
	            curr = list.getHead();

	            while (true) {
	                // Search for the book by ISBN
	                temp = bst.searchISBN(in);

	                if (temp == null) {
	                    break; // Exit if the book is not found
	                }

	                // ✅ Reset to the beginning of the list to find the correct patron
	                curr = list.getHead();

	                while (curr != null) {
	                    if (curr.getPatronData().getCardNum() == this.cardNum) {
	                        break; // Found the correct patron
	                    }
	                    curr = curr.getNextNode();
	                }

	                // ✅ Ensure we have the correct patron's checkout stack
	                StackLinkedList patronStack = curr.getPatronData().checkedOutBooks;

	                // ✅ Check for duplicates while respecting stack rules
	                boolean alreadyCheckedOut = false;
	                StackLinkedList tempStorage = new StackLinkedList();

	                // Pop elements to check for duplicates
	                while (!patronStack.isEmpty()) {
	                    String isbn = patronStack.pop();
	                    tempStorage.push(isbn); // Store to restore later

	                    if (isbn.equals(temp.getISBN())) {
	                        alreadyCheckedOut = true;
	                    }
	                }

	                // Restore the original stack to maintain its integrity
	                while (!tempStorage.isEmpty()) {
	                    patronStack.push(tempStorage.pop());
	                }

	                // ✅ Output if the book is already checked out
	                if (alreadyCheckedOut) {
	                    Toolkit.getDefaultToolkit().beep();
	                    System.err.println("You have already added this book to your checkout list.");
	                }
	                else if(books.searchReturn(temp.getISBN()).getAvailable()) {
	                    // ✅ Add the book if available and not already checked out
	                    System.out.printf("\nThe Book added to your Checkout List is %s by %s %s!!\n", temp.getTitle(), temp.getAuthorFName(), temp.getAuthorLName());

	                    // Add the book to both stacks
	                    patronStack.push(temp.getISBN());
	                    tempStack.push(temp.getISBN());
	                } else {
	                    Toolkit.getDefaultToolkit().beep();
	                    System.err.println("The book is not available for checkout.");
	                }

	                System.out.print("\nWould you like to add another book? (Y- Yes) otherwise enter anything else: ");
	                String response = in.next().trim();

	                if (!response.equalsIgnoreCase("Y")) { // If user enters anything other than "Y", exit
	                    break;
	                }
	            }
	            break;

	        case 2:	            	
	                curr = list.getHead();
	                
	                while (curr != null) {
	                    if (curr.getPatronData().getCardNum() == this.cardNum) {
	                        if (curr.getPatronData().checkedOutBooks.isEmpty()) {
	                            System.err.println("Your checkout list is empty. There is nothing to remove!!");
	                            break;	
	                        }

	                        // Keep removing books until the user decides to stop
	                        while (true) {
	                            System.out.println("\nThe Book you are removing is\n" + bst.searchPassedISBN(tempStack.stackTop(), in).details());
	                            System.out.print("\nDo you still want to remove it?\nEnter \"Y\" if Yes and any other character otherwise -> ");
	                            String res = in.next();

	                            if (res.equalsIgnoreCase("Y")) {
	                                curr.getPatronData().checkedOutBooks.pop();
	                                tempStack.pop();
	                                System.out.println("\nThe book has been successfully removed.");
	                            } else {
	                                System.out.println("\nBook removal cancelled.");
	                                break; // Exit the loop if the user doesn't want to remove another book
	                            }

	                            // Ask if they want to remove another book
	                            if (curr.getPatronData().checkedOutBooks.isEmpty()) {
	                                System.out.println("Your checkout list is now empty.");
	                                break;
	                            }

	                            System.out.print("\nPress ENTER to remove another book or enter a number to return to previous menu: ");
	    	                    if (in.hasNextInt()) { // If user enters a number, break
	    	                        in.nextInt();
	    	                        in.nextLine(); // Consume newline
	    	                        break;
	    	                    }
	    	                    in.nextLine(); // Consume any remaining input
	                        }
	                        
	                        break; // Exit the outer loop once the correct patron is found
	                    }
	                    curr = curr.getNextNode();
	                }
	                break;
	                
	            case 3:
	            	curr = list.getHead();
	                
	                while (curr != null) {
	                    if (curr.getPatronData().getCardNum() == this.cardNum) {
	                        if (curr.getPatronData().checkedOutBooks.isEmpty()) {
	                            System.err.println("Your checkout list is empty. There is nothing to view!!");
	                            break;	
	                        }
	                        
                            System.out.println("The Last Book entered into your checkout list is\n" + bst.searchPassedISBN(tempStack.stackTop(), in).details());
                            System.out.println("There are currently "+curr.getPatronData().checkedOutBooks.stackCount()+" books in your checkout list");
	                        
	                        break; // Exit the outer loop once the correct patron is found
	                    }
	                    curr = curr.getNextNode();
	                }
	                break;

	            case 4:
	            	curr = list.getHead();
	            	
	            	while (curr != null) {
	                    if (curr.getPatronData().getCardNum() == this.cardNum) {
	                        if (curr.getPatronData().checkedOutBooks.isEmpty()) {
	                            System.err.println("Your checkout list is empty. There is nothing to remove!!");
	                            break;	
	                        }
	                        
	                        curr.getPatronData().checkedOutBooks.destroyStack();
	                        tempStack.destroyStack();
	    	                System.out.println("Checkout list has been cleared.");

	                        break;
	                    }
	                    curr = curr.getNextNode();
	                }             
	                break;

	            case 5:
	            		            	
	            	int iterations = tempStack.stackCount();

					if (iterations > 0) {
					    for (int x = 0; x < iterations; x++) {
					        String isbn = tempStack.pop(); // Get ISBN from stack
					        bookCurr = books.getHead();
			            	
			            	while (bookCurr != null) {
			                    if (bookCurr.getBookDetail().getISBN() == isbn) {
			                    	
			                        bookCurr.getBookDetail().getcheckedOutPatrons().enqueue(cardNum);
			                        bookCurr.getBookDetail().setQuantity(bookCurr.getBookDetail().getQuantity()-1);
			                        
			                        if(bookCurr.getBookDetail().getQuantity()== 0) {
			                        	bookCurr.getBookDetail().setAvailable(false);
			                        }
			                        break;
			                    }
			                    bookCurr = bookCurr.getNextNode();
			                }
					        
						    bst.ISBNRecursiveEnqueue(bst.getRoot(), isbn, this.cardNum);	        					        
					    }
					}
					
	                System.out.println("Exiting checkout system...");
	                break;

	            default:
	                System.err.println("Invalid option! Please enter a number between 1 and 5.");
	        }
	    } while (opt != 5);		
	}

    @Override
    public String toString() {
        return fname + "\t"+ lname + "\t" + cardNum + "\t"+ checkedOutBooks.toString();
    }	
    
  	public String detailedToString() {
        return "Patron Name: " + fname +" "+ lname + " | Library Card Number: " + cardNum + " | List of Checked out books: "+ checkedOutBooks+ "\n";
    }		


}
